package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Extends the OpMode class to provide a Example Autonomous code
//------------------------------------------------------------------------------
/* This opMode does the following steps:
 * 0) Wait till the encoders show reset to zero.
 * 1) Drives to the vicinity of the beacon using encoder counts
 * 2) Use the Legacy light sensor to locate the white line
 * 3) Tracks the line until the wall is reached
 * 4) Pushes up against wall to get square using constant power an time.
 * 5) Deploys the Climbers using the servo
 * 6) Drives to the Mountain using encoder counts
 * 7) Climbs the Mountain using constant speed and time
 * 8) Stops and waits for end of Auto
 *
 * The code is executed as a state machine.  Each "State" performs a specific task which takes time to execute.
 * An "Event" can cause a change in the state.  One or more "Actions" are performed when moving on to next state
 */

public class AutonomousRed extends OpMode
{
    // A list of system States.
    private enum State
    {
        STATE_INITIAL,
        STATE_SWEEP_TURN,
        STATE_DRIVE_TO_BEACON,
        /*STATE_RELEASE_CLIMBERS,
        STATE_REVERSE_TO_MOUNTAIN,
        STATE_SQUARE_TO_MOUNTAIN,
        STATE_UP_THE_MOUNTAIN,
        STATE_UP_WITH_TURBO,*/
        STATE_STOP,
    }

    // Define driving paths as pairs of relative wheel movements in inches (left,right) plus speed %
    // Note: this is a dummy path, and is NOT likely to actually work with YOUR robot.
    //(left, right, arm, turbo, speed)

    final PathSeg[] mSweepTurnPath = {
            new PathSeg(  0.0,  4.0, 0.0, 0.0, 1.0),  // Left
    };

    final PathSeg[] mDriveToBeaconPath = {
            new PathSeg( 21.0, 25.0, 30.0, 0.0, 1.0)
    };

    /*final PathSeg[] mReleaseClimbers = {
            new PathSeg( 0.0, 0.0, 5.0, 0.0, 1.0)
    };

    final PathSeg[] mReverseToMountain = {
            new PathSeg( -10.0, -10.0, -5.0, 0.0, 1.0)
    };

    final PathSeg[] mSquareToMountain = {
            new PathSeg( -3.0, 3.0, 0.0, 0.0, 1.0)
    };

    final PathSeg[] mUpTheMountain = {
            new PathSeg(8.0, 8.0, 5.0, 0.0, 1.0)
    };

    final PathSeg[] mUpWithTurbo = {
            new PathSeg(20.0, 20.0, 0.0, 20.0, 1.0)
    };*/


    final double COUNTS_PER_INCH = 373 ;    // Number of encoder counts per inch of wheel travel.


    //--------------------------------------------------------------------------
    // Robot device Objects
    //--------------------------------------------------------------------------
    public DcMotor      leftMotor;
    public DcMotor      rightMotor;
    public DcMotor      armMotor;
    public DcMotor      turboMotor;


    private int         leftMotorEncoderTarget;
    private int         rightMotorEncoderTarget;
    private int         armMotorEncoderTarget;
    private int         turboMotorEncoderTarget;

    // Loop cycle time stats variables
    public ElapsedTime  mRuntime = new ElapsedTime();   // Time into round.

    private ElapsedTime mStateTime = new ElapsedTime();  // Time into current state

    private State       mCurrentState;    // Current State Machine State.
    private PathSeg[]   mCurrentPath;     // Array to hold current path
    private int         mCurrentSeg;      // Index of the current leg in the current path


    //--------------------------------------------------------------------------
    // Demo Hardware
    //--------------------------------------------------------------------------
    public AutonomousRed()
    {
    }

    //--------------------------------------------------------------------------
    @Override
    public void init()
    {
        // Initialize class members.
    // init
    //--------------------------------------------------------------------------
        rightMotor  = hardwareMap.dcMotor.get("m1");
        leftMotor = hardwareMap.dcMotor.get("m2");
        rightMotor.setDirection(DcMotor.Direction.REVERSE);
        armMotor = hardwareMap.dcMotor.get("m3");
        turboMotor = hardwareMap.dcMotor.get("m5");


        setDrivePower(0, 0, 0, 0);        // Ensure motors are off
        resetDriveEncoders();       // Reset Encoders to Zero
    }

    //--------------------------------------------------------------------------
    // loop
    //--------------------------------------------------------------------------
    // @Override
    public void init_loop()
    {
        // Keep resetting encoders and show the current values
        resetDriveEncoders();        // Reset Encoders to Zero
        telemetry.addData("ENC", String.format("L:R %d:%d", getLeftPosition(), getRightPosition()));
    }

    //--------------------------------------------------------------------------
    // start
    //--------------------------------------------------------------------------
    @Override
    public void start()
    {
        // Setup Robot devices, set initial state and start game clock
        setDriveSpeed(0, 0, 0, 0);        // Set target speed to zero
        runToPosition();            // Run to Position set by encoder targets
        mRuntime.reset();           // Zero game clock
        newState(State.STATE_INITIAL);
    }

    //--------------------------------------------------------------------------
    // loop
    //--------------------------------------------------------------------------
    @Override
    public void loop()
    {
        // Send the current state info (state and time) back to first line of driver station telemetry.
        telemetry.addData("0", String.format("%4.1f ", mStateTime.time()) + mCurrentState.toString());

        // Execute the current state.  Each STATE's case code does the following:
        // 1: Look for an EVENT that will cause a STATE change
        // 2: If an EVENT is found, take any required ACTION, and then set the next STATE
        //   else
        // 3: If no EVENT is found, do processing for the current STATE and send TELEMETRY data for STATE.
        //
        switch (mCurrentState)
        {
            case STATE_INITIAL:
                if (encoderAtZero())
                {
                    startPath(mSweepTurnPath);
                    newState(State.STATE_SWEEP_TURN);
                }
                else
                {
                    // Display Diagnostic data for this state.
                    telemetry.addData("1", String.format("L %5d - R %5d - A %5d", getLeftPosition(),
                            getRightPosition(), getArmPosition()));
                }
                break;

            case STATE_SWEEP_TURN:
                if (mStateTime.time() > 1.0)
                {
                    startPath(mDriveToBeaconPath);
                    newState(State.STATE_DRIVE_TO_BEACON);
                }
                else
                {
                    // Display Diagnostic data for this state.
                    telemetry.addData("1", String.format("L %5d - R %5d - A %5d", getLeftPosition(),
                            getRightPosition(), getArmPosition()));
                }
                break;

            /*case STATE_DRIVE_TO_BEACON:
                if (mStateTime.time() > 6.0)
                {
                    startPath(mReleaseClimbers);
                    newState(State.STATE_RELEASE_CLIMBERS);
                }
                else
                {
                    // Display Diagnostic data for this state.
                    telemetry.addData("1", String.format("L %5d - R %5d - A %5d ", getLeftPosition(),
                            getRightPosition(), getArmPosition()));
                }
                break;

            case STATE_RELEASE_CLIMBERS:
                if (mStateTime.time() > 2.0)
                {
                    startPath(mReverseToMountain);
                    newState(State.STATE_REVERSE_TO_MOUNTAIN);
                }
                else
                {
                    // Display Diagnostic data for this state.
                    telemetry.addData("1", String.format("L %5d - R %5d - A %5d", getLeftPosition(),
                            getRightPosition(), getArmPosition()));
                }
                break;

            case STATE_REVERSE_TO_MOUNTAIN:
                if (mStateTime.time() > 2.5)
                {
                    startPath(mSquareToMountain);
                    newState(State.STATE_SQUARE_TO_MOUNTAIN);
                }
                else
                {
                    // Display Diagnostic data for this state.
                    telemetry.addData("1", String.format("L %5d - R %5d - A %5d", getLeftPosition(),
                            getRightPosition(), getArmPosition()));
                }
                break;

            case STATE_SQUARE_TO_MOUNTAIN:
                if (mStateTime.time() > 2.0)
                {
                    startPath(mUpTheMountain);
                    newState(State.STATE_UP_THE_MOUNTAIN);
                }
                break;

            case STATE_UP_THE_MOUNTAIN:
                if (mStateTime.time() > 3.5)
                {
                    startPath(mUpWithTurbo);
                    newState(State.STATE_UP_WITH_TURBO);
                }
                else
                {
                    // Display Diagnostic data for this state.
                    telemetry.addData("1", String.format("L %5d - R %5d - A %5d", getLeftPosition(),
                            getRightPosition(), getArmPosition()));
                }
                break;*/

            case STATE_DRIVE_TO_BEACON:
                if (pathComplete())
                {
                    useConstantPower();
                    setDrivePower(0, 0, 0, 0);
                    newState(State.STATE_STOP);
                }
                break;

            case STATE_STOP:

                break;
        }
    }

    //--------------------------------------------------------------------------
    // stop
    //--------------------------------------------------------------------------
    @Override
    public void stop()
    {
        // Ensure that the motors are turned off.
        useConstantPower();
        setDrivePower(0, 0, 0, 0);
    }

    //--------------------------------------------------------------------------
    // User Defined Utility functions here....
    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    //  Transition to a new state.
    //--------------------------------------------------------------------------
    private void newState(State newState)
    {
        // Reset the state time, and then change to next state.
        mStateTime.reset();
        mCurrentState = newState;
    }


    //--------------------------------------------------------------------------
    // setEncoderTarget( LeftEncoder, RightEncoder);
    // Sets Absolute Encoder Position
    //--------------------------------------------------------------------------
    void setEncoderTarget(int leftEncoder, int rightEncoder, int armEncoder, int turboEncoder)
    {
        leftMotor.setTargetPosition(leftMotorEncoderTarget = leftEncoder);
        rightMotor.setTargetPosition(rightMotorEncoderTarget = rightEncoder);
        armMotor.setTargetPosition(armMotorEncoderTarget = armEncoder);
        turboMotor.setTargetPosition(turboMotorEncoderTarget = turboEncoder);
    }

    //--------------------------------------------------------------------------
    // addEncoderTarget( LeftEncoder, RightEncoder);
    // Sets relative Encoder Position.  Offset current targets with passed data
    //--------------------------------------------------------------------------
    void addEncoderTarget(int leftEncoder, int rightEncoder, int armEncoder, int turboEncoder)
    {
        leftMotor.setTargetPosition(leftMotorEncoderTarget += leftEncoder);
        rightMotor.setTargetPosition(rightMotorEncoderTarget += rightEncoder);
        armMotor.setTargetPosition(armMotorEncoderTarget += armEncoder);
        turboMotor.setTargetPosition(turboMotorEncoderTarget += turboEncoder);
    }

    //--------------------------------------------------------------------------
    // setDrivePower( LeftPower, RightPower);
    //--------------------------------------------------------------------------
    void setDrivePower(double leftPower, double rightPower, double armPower, double turboPower)
    {
        leftMotor.setPower(Range.clip(leftPower, -1, 1));
        rightMotor.setPower(Range.clip(rightPower, -1, 1));
        armMotor.setPower(Range.clip(armPower,-1, 1));
        turboMotor.setPower(Range.clip(turboPower, -1, 1));
    }

    //--------------------------------------------------------------------------
    // setDriveSpeed( LeftSpeed, RightSpeed);
    //--------------------------------------------------------------------------
    void setDriveSpeed(double leftSpeed, double rightSpeed, double armSpeed, double turboSpeed)
    {
        setDrivePower(leftSpeed, rightSpeed, armSpeed, turboSpeed);
    }

    //--------------------------------------------------------------------------
    // runToPosition ()
    // Set both drive motors to encoder servo mode (requires encoders)
    //--------------------------------------------------------------------------
    public void runToPosition()
    {
        setDriveMode(DcMotorController.RunMode.RUN_TO_POSITION);
    }

    //--------------------------------------------------------------------------
    // useConstantSpeed ()
    // Set both drive motors to constant speed (requires encoders)
    //--------------------------------------------------------------------------
    public void useConstantSpeed()
    {
        setDriveMode(DcMotorController.RunMode.RUN_USING_ENCODERS);
    }

    //--------------------------------------------------------------------------
    // useConstantPower ()
    // Set both drive motors to constant power (encoders NOT required)
    //--------------------------------------------------------------------------
    public void useConstantPower()
    {
        setDriveMode(DcMotorController.RunMode.RUN_WITHOUT_ENCODERS);
    }

    //--------------------------------------------------------------------------
    // resetDriveEncoders()
    // Reset both drive motor encoders, and clear current encoder targets.
    //--------------------------------------------------------------------------
    public void resetDriveEncoders()
    {
        setEncoderTarget(0, 0, 0, 0);
        setDriveMode(DcMotorController.RunMode.RESET_ENCODERS);
    }

    //--------------------------------------------------------------------------
    // syncEncoders()
    // Load the current encoder values into the Target Values
    // Essentially synch's the software with the hardware
    //--------------------------------------------------------------------------
    void synchEncoders()
    {
        //	get and set the encoder targets
        leftMotorEncoderTarget = leftMotor.getCurrentPosition();
        rightMotorEncoderTarget = rightMotor.getCurrentPosition();
        armMotorEncoderTarget = armMotor.getCurrentPosition();
        turboMotorEncoderTarget = turboMotor.getCurrentPosition();
    }

    //--------------------------------------------------------------------------
    // setDriveMode ()
    // Set both drive motors to new mode if they need changing.
    //--------------------------------------------------------------------------
    public void setDriveMode(DcMotorController.RunMode mode)
    {
        // Ensure the motors are in the correct mode.
        if (leftMotor.getChannelMode() != mode)
            leftMotor.setChannelMode(mode);

        if (rightMotor.getChannelMode() != mode)
            rightMotor.setChannelMode(mode);

        if (armMotor.getChannelMode() != mode)
            armMotor.setChannelMode(mode);

        if (turboMotor.getChannelMode() != mode)
            turboMotor.setChannelMode(mode);
    }

    //--------------------------------------------------------------------------
    // getLeftPosition ()
    // Return Left Encoder count
    //getRightPosition ()
    // Return Right Encoder count
    //--------------------------------------------------------------------------
    int getLeftPosition() {
        return leftMotor.getCurrentPosition();
    }

    int getRightPosition() {
        return rightMotor.getCurrentPosition();
    }

    int getArmPosition() {
        return armMotor.getCurrentPosition();
    }

    int getTurboPosition() {
        return turboMotor.getCurrentPosition();
    }

    //--------------------------------------------------------------------------
    // moveComplete()
    // Return true if motors have both reached the desired encoder target
    //--------------------------------------------------------------------------
    boolean moveComplete()
    {
        //  return (!mLeftMotor.isBusy() && !mRightMotor.isBusy());
        return ((Math.abs(getLeftPosition() - leftMotorEncoderTarget) < 10) &&
                (Math.abs(getRightPosition() - rightMotorEncoderTarget) < 10) &&
                (Math.abs(getArmPosition() - armMotorEncoderTarget) < 10) &&
                (Math.abs(getTurboPosition() - turboMotorEncoderTarget) < 10));
    }

    //--------------------------------------------------------------------------
    // encodersAtZero()
    // Return true if both encoders read zero (or close)
    //--------------------------------------------------------------------------
    boolean encoderAtZero()
    {
        return ((Math.abs(getLeftPosition()) < 5) && (Math.abs(getRightPosition()) < 5) &&
                (Math.abs(getArmPosition()) < 5) && (Math.abs(getTurboPosition()) < 5));
    }

    /*
        Begin the first leg of the path array that is passed in.
        Calls startSeg() to actually load the encoder targets.
     */
    private void startPath(PathSeg[] path)
    {
        mCurrentPath = path;    // Initialize path array
        mCurrentSeg = 0;
        synchEncoders();        // Lock in the current position
        runToPosition();        // Enable RunToPosition mode
        startSeg();             // Execute the current (first) Leg
    }

    /*
        Starts the current leg of the current path.
        Must call startPath() once before calling this
        Each leg adds the new relative movement onto the running encoder totals.
        By not reading and using the actual encoder values, this avoids accumulating errors.
        Increments the leg number after loading the current encoder targets
     */
    private void startSeg()
    {
        int leftMotor;
        int rightMotor;
        int armMotor;
        int turboMotor;

        if (mCurrentPath != null)
        {
            // Load up the next motion based on the current segemnt.
            leftMotor  = (int)(mCurrentPath[mCurrentSeg].leftMotor * COUNTS_PER_INCH);
            rightMotor = (int)(mCurrentPath[mCurrentSeg].rightMotor * COUNTS_PER_INCH);
            armMotor = (int)(mCurrentPath[mCurrentSeg].armMotor * COUNTS_PER_INCH);
            turboMotor = (int)(mCurrentPath[mCurrentSeg].turboMotor * COUNTS_PER_INCH);
            addEncoderTarget(leftMotor, rightMotor, armMotor, turboMotor);
            setDriveSpeed(mCurrentPath[mCurrentSeg].mSpeed, mCurrentPath[mCurrentSeg].mSpeed,
                    mCurrentPath[mCurrentSeg].mSpeed, mCurrentPath[mCurrentSeg].mSpeed);

            mCurrentSeg++;  // Move index to next segment of path
        }
    }

    /*
        Determines if the current path is complete
        As each segment completes, the next segment is started unless there are no more.
        Returns true if the last leg has completed and the robot is stopped.
     */
    private boolean pathComplete()
    {
        // Wait for this Segement to end and then see what's next.
        if (moveComplete())
        {
            // Start next Segement if there is one.
            if (mCurrentSeg < mCurrentPath.length)
            {
                startSeg();
            }
            else  // Otherwise, stop and return done
            {
                mCurrentPath = null;
                mCurrentSeg = 0;
                setDriveSpeed(0, 0, 0, 0);
                useConstantSpeed();
                return true;
            }
        }
        return false;
    }
}

/**
 * Define a "PathSegment" object, used for building a path for the robot to follow.
 */
class PathSeg
{
    public double leftMotor;
    public double rightMotor;
    public double armMotor;
    public double turboMotor;
    public double mSpeed;

    // Constructor
    public PathSeg(double left, double right, double arm, double turbo, double Speed)
    {
        leftMotor = left;
        rightMotor = right;
        armMotor = arm;
        turboMotor = turbo;
        mSpeed = Speed;
    }
}
